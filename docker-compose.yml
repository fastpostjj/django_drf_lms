version: '3.9'

# networks:
#   db_network:

services:
  app:
    build: .
    # network_mode: host
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 1m
    #   timeout: 10s
    #   retries: 3
    # networks:
    #   - db_network
    # restart: always
    command: bash -c "python manage.py collectstatic --noinput
              && python manage.py migrate
              && python manage.py runserver 0.0.0.0:8000"
              # && python manage.py loaddata data.json
              # && python manage.py csu
    ports:
      - "8000:8000"
    env_file:
      # - .env
      - .env-docker
    # environment:
    #   - DB_PASSWORD=${POSTGRES_PASSWORD}
    # volumes:
    #   - .:/app
    depends_on:
      - db
      - redis
      # db:
      #   condition: service_healthy
      # redis:
      #   condition: service_started

  db:
    image: postgres:14.7-alpine
    restart: always
    container_name: db
    # networks:
    #   - db_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env

  redis:
    image: redis
    command: redis-server --save 20 1 --loglevel warning
    volumes:
       - redis_data:/data
    ports:
      - "6379:6379"
    restart: always

  # celery:
  #   build: .
  #   container_name: celery
  #   command: bash -c "celery -A config.celery worker --loglevel=info"
  #   volumes:
  #     - .:/app
  #     - ./.env:/app/.env
  #   links:
  #     - redis
  #   # networks:
  #   #   - db_network
  #   depends_on:
  #     - db
  #     - redis
  #     - app

  # celery-beat:
  #   container_name: celery-beat
  #   build: .
  #   command: >
  #     bash -c "sleep 30 && celery -A config.celery beat --loglevel=info"
  #   volumes:
  #     - .:/app
  #     - ./.env:/app/.env
  #   # networks:
  #   #   - db_network
  #   depends_on:
  #     - app
  #     - celery
  #     - redis


volumes:
  postgres_data:
  redis_data:
